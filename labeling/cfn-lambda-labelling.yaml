AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation to deploy pre and post labeling Lambdas for Question Equivalency Labelling Task
Resources:
  ConsolidationLambdaSMGTExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
  PreLabelingLambdaSMGTExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      Path: /
  PreLabelTaskLambda:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - PreLabelingLambdaSMGTExecutionRole
    Properties:
      Code:
        ZipFile: |
            import json

            def lambda_handler(event, context):

                record = event["dataObject"]
                print(event)
                output = {
                    "taskInput": {
                        "taskObject": record['source']
                    },
                }
                return output  
      Role: !GetAtt 
        - PreLabelingLambdaSMGTExecutionRole
        - Arn
      FunctionName: gt-prelabel-task-lambda
      Timeout: 60
      Handler: sagemaker-gt-preprocess.lambda_handler
      Runtime: python3.6
      MemorySize: 128
  PostLabelTaskLambda:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - ConsolidationLambdaSMGTExecutionRole
    Properties:
      Code:
          ZipFile: |
            import json
            import boto3
            from urllib.parse import urlparse

            def lambda_handler(event, context):
                consolidated_labels = []

                parsed_url = urlparse(event['payload']['s3Uri']);
                s3 = boto3.client('s3')
                textFile = s3.get_object(Bucket = parsed_url.netloc, Key = parsed_url.path[1:])
                filecont = textFile['Body'].read()
                annotations = json.loads(filecont);

                for dataset in annotations:
                    for annotation in dataset['annotations']:
                        new_annotation = json.loads(annotation['annotationData']['content'])
                        label = {
                            'datasetObjectId': dataset['datasetObjectId'],
                            'consolidatedAnnotation' : {
                            'content': {
                                event['labelAttributeName']: {
                                    'workerId': annotation['workerId'],
                                    'boxesInfo': new_annotation,
                                    'imageSource': dataset['dataObject']
                                    }
                                }
                            }
                        }
                        consolidated_labels.append(label)

                return consolidated_labels   
      Role: !GetAtt 
        - ConsolidationLambdaSMGTExecutionRole
        - Arn
      FunctionName: gt-postlabel-task-lambda
      Timeout: 60
      Handler: sagemaker-gt-postprocess.lambda_handler
      Runtime: python3.6
      MemorySize: 128
Outputs:
  PostLabelingLambdaIAMRole:
    Description: Post Labeling Consolidation Lambda IAM Role
    Value: !GetAtt 
      - ConsolidationLambdaSMGTExecutionRole
      - Arn
